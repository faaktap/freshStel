<template>
<v-container fluid>

  <v-row  v-if="showSelection">
   <v-col cols="12">
    <v-card xcolor="deep-purple lighten-4">
     <v-container fluid color="gray--text text--lighten-5">
      <v-row >
       <v-col>
        <v-text-field
           v-model="search"
           append-icon="mdi-magnify"
           label="Search"
           single-line
           hide-details
        />
       </v-col>
       <v-col>
<!------------------SWITCH------------------------------------------->
    <v-card class="col wrap text-center d-flex justify-space-between ml-0 mt-1 mb-2 pl-1 pr-1">
           <v-switch v-model="g12" hide-details class="mt-1 mr-2 mb-2 ml-2" label="G12"></v-switch>
           <v-switch v-model="g11" hide-details class="mt-1 mr-2 mb-2 ml-2" label="G11"></v-switch>
           <v-switch v-model="g10" hide-details class="mt-1 mr-2 mb-2 ml-2" label="G10"></v-switch>
           <v-switch v-model="g9" hide-details class="mt-1 mr-2 mb-2 ml-2" label="G9"></v-switch>
           <v-switch v-model="g8" hide-details class="mt-1 mr-2 mb-2 ml-2" label="G8"></v-switch>
    </v-card>
<!-------------------TABLE------------------------------------------>
       </v-col>
      </v-row>
      <v-row dense>
       <v-col cols="12">
        <v-card color="blue lighten-5" class="ma-1">
         <div>
          <v-card class="text-center ma-2 pa-2" color="primary gray--text text--lighten-3">
            Eksamen Vraestel Afrol Klasse
          </v-card>
          <v-data-table
                 :headers="subjectHeader"
                 :items="subjectListFilter"
                 :items-per-page="30"
                 :search="search"
                  class="elevation-1"
                  color="purple lighten-3"
                 @dblclick:row="doubleClickOnTableRow"
                 ref="myTable"
           >
      <template v-slot:[`item.venue`]="props">
        <v-edit-dialog
          :return-value.sync="props.item.venue"
          @save="save(props.item)"
          @cancel="cancel(props.item)"
          @open="open(props.item)"
          @close="close(props.item)">
          <span v-if="!props.item.venue" class="green" background-color="deep-purple accent-4">
          {{ props.item.venue }}
          <v-btn x-small icon>
            <v-icon x-small>mdi-circle-edit-outline</v-icon>
           </v-btn>
          </span>
          <span v-else>{{ props.item.venue }}</span>
          <template v-slot:input>
            <div class="mt-4 text-h6"> Update Venue {{props.item.id}}</div>
            <!-- <z-auto-place
              v-model="props.item.venue"
              :value="props.item.venue"
            /> -->

<auto-sel-room id="zyx4"
             asLabel="Room"
            :initialValue="props.item.venue"
            :itemObj="getZml.place"
             v-model="props.item.venue"
      />

            <v-btn small class="mb-4" @click="$emit('save')">Press Enter to save, esc to cancel </v-btn>
          </template>

        </v-edit-dialog>
      </template>
      <template v-slot:[`item.examdate`]="props">
        <v-edit-dialog
          :return-value.sync="props.item.examdate"
          @save="save(props.item)"
          @cancel="cancel(props.item)"
          @open="open(props.item)"
          @close="close(props.item)"
        >
           <span v-if="!props.item.examdate" class="green" background-color="deep-purple accent-4">
            {{ props.item.examdate }}
           <v-btn x-small icon>
            <v-icon x-small>mdi-circle-edit-outline</v-icon>
           </v-btn>
           </span>
           <span v-else>{{ props.item.examdate }}</span>
          <template v-slot:input>
            <div class="mt-4 text-h6"> Update Examination Date for {{props.item.id}}</div>
            <!-- <base-date v-model="props.item.examdate"  label="Date" instructions="FA" /> -->
          <v-date-picker
             v-model="props.item.examdate"
             dense
             xno-title
             transition="scale-transition"
           >
           </v-date-picker>
            <div class="mb-4">Press <strong>Enter</strong> to save, esc to cancel </div>
          </template>
        </v-edit-dialog>
      </template>
           </v-data-table>
          </div>
         </v-card>
        </v-col>
       </v-row>
     </v-container>
    </v-card>
   </v-col>
  </v-row>

  <v-row v-else>
    <v-col cols="12">
       <v-card class="text-center ma-2 pa-4" color="primary">
            <span class="text-md-h4 text-bold"> Spesifieke Eksamen Vraestel Studente Lys</span>
            <v-btn class="float-right" @click="showSelection = true"> Back to Selection </v-btn>

       </v-card>

     <reports-table-small
       v-if="sqlSelect"
       :reportHeader="reportHeader"
       :sqlSelect="sqlSelect"
       :footer="makeAFooter"
     />
       <v-card class="text-center ma-2 pa-4" color="primary">
            Spesifieke Eksamen Vraestel Studente Lys se Einde
            <v-btn class="float-right" @click="showSelection = true"> Back to Selection </v-btn>
       </v-card>

    </v-col>
  </v-row>


</v-container>
</template>

<script>
import { getters } from "@/api/store"
import { zmlFetch } from '@/api/zmlFetch';
import ReportsTableSmall from '@/components/ReportsTableSmall.vue'
//import ZAutoPlace from '@/components/fields/ZAutoPlace.vue'
import { infoSnackbar } from '@/api/GlobalActions';
import AutoSelRoom from '@/components/AutoSelRoom.vue'
export default {
 name: "EksamenDruk",
  props:{},
  components: {
    ReportsTableSmall,
    //ZAutoPlace,
    AutoSelRoom ,
  },
  data: () => ({
   getZml: getters.getState({ object: "gZml" }),
   reportHeader: null,
   sqlSelect: null,
   search: '',
   subjectList:[],
   subjectHeader:[],
   selectedForPrint: {subject:'', grade:'', teacher:''},
   showSelection: true,
   updateNeeded: {},
   updateSql: null,
   g8:false,   g9:false,   g10:false,
   g11:true, g12:true
  }),
  computed: {
    makeAFooter() {
      return `<br><br>\
              <table class="table ma-2 pa-2" BORDER=2 BORDERCOLOR="#4a6053" width=96% style='text-align: right; border-spacing: 2px;'>\
               <tr>
                <th>EDUCATOR:</th><td align=left>${this.selectedForPrint.teacher} :: ${this.selectedForPrint.totalstudents}</td>\
                <th>VENUE:</th><th align=left>${this.selectedForPrint.venue} </th>\
               </tr>\
               <tr>\
                <th>SUBJECT:${this.selectedForPrint.grade}</th><td align=left>${this.selectedForPrint.subject} </td>\
                <th width=20%>Checked By:</th><td width=30%></td>\
               </tr>\
               <tr>\
                <th>EXAMINATION DATE:</th><td align=left>${this.selectedForPrint.examdate}</td>\
                <th width=20%>Invigilator/Toesighouer:</th><td width=30%></td>\
                </tr>\
              </table>`
    },
    subjectListFilter() {
      if (!this.subjectList.length) return [];
      if (this.g8 || this.g9 || this.g10 || this.g11|| this.g12) {
         let answer = this.subjectList.filter(ele => {
            if (this.g8 && ele.grade == 'G08') return true
            if (this.g9 && ele.grade == 'G09') return true
            if (this.g10 && ele.grade == 'G10') return true
            if (this.g11 && ele.grade == 'G11') return true
            if (this.g12 && ele.grade == 'G12') return true
            return false
          })
         return answer
      }
      return this.subjectList;
    }
  },
  methods: {
    submit() {
      console.log('submit')
      return
    },
    testX(e1,e2) {
      console.log('data returned:',e1,e2)
    },
      save (e) {
        this.updateSql = null
        if (e.venue && e.venue.length > 9) {
          const index = e.venue.lastIndexOf('(');
          e.venue = e.venue.substr(0,index)
        }
        //console.log('before update - venue = ', e.venue)
        if (this.updateNeeded !== null && (this.updateNeeded.u1 !== e.examdate || this.updateNeeded.u2 !== e.venue)) {
          this.updateSql = `update dkhs_subjectgroup set examdate = '${e.examdate}', venue = '${e.venue}' \
                      where id = ${e.id}`
        }
        if (this.updateSql) {
            let ts = {task: 'PlainSql',
               sql: this.updateSql
             }
          zmlFetch(ts, this.noNeedToDoAnything)
        }
      },
      noNeedToDoAnything(response) {
        if (response.errorcode !== 0) {
          alert('some error occured on update')
          console.error('after update error: ', response)
        }
      },
      cancel () {
        this.updateNeeded = null
        return
      },
      open (e) {
        this.updateNeeded = {u1:e.examdate, u2:e.venue}
        return
      },
      close () {
        this.updateNeeded = null
        return
      },



    doubleClickOnTableRow(e,i) {
      //console.log('e1.item.grade', i.item.grade, e.clientX)
      if (!i.item.venue) {
        infoSnackbar('Please provide a venue, by clicking on the venue button or column.')
        return
      }
      if (!i.item.examdate) {
        infoSnackbar('We need an examination date before we print, click on the examdate column or button')
        return
      }
      this.selectedForPrint = {subject: i.item.subjectname
                             , grade: i.item.grade
                             , teacher: i.item.teacher
                             , examdate: i.item.examdate
                             , venue: i.item.venue
                             , totalstudents: i.item.totalstudents}
     this.hello(this.selectedForPrint)
    },
    loadData(response) {
      this.subjectList = []
      if (response !== undefined && response.errorcode && response.errorcode != 0) {
        alert('we had a loading error :-(')
        return
      } else {
        this.subjectList = response
        Object.keys(this.subjectList[0]).forEach(name => {
            this.subjectHeader.push(
                 { text:name.charAt(0).toUpperCase() + name.slice(1), value: name} )
        })
      }
      //console.log(this.subjectHeader)
    },
    hello(parms) {
      this.sqlSelect = `select s.studentid \
   , s.surname\
	 , s.firstname\
	 , concat(s.grade,'.', s.gclass) grade\
	 , g.venue\
	 , g.examdate\
	 , g.teacher\
   , IF( EXISTS(SELECT studentid FROM dkhs_learnassist WHERE studentid = s.studentid), 'BUR', '') Assist
 from dkhs_student s\
    , dkhs_subjectgroup g\
	, dkhs_studsub ss\
 where s.studentid = ss.studentid\
   and g.hodsubjectid = ss.hodsubjectid\
   and g.teacher = ss.teacher\
   and g.teacher = '${parms.teacher}' \
   and g.subjectname = '${parms.subject}' \
   and s.grade = '${parms.grade}'
   and g.grade = '${parms.grade}'`
      this.reportHeader = `Attendance List for ${parms.grade} ${parms.teacher} in ${parms.venue} on ${parms.examdate}`
      this.showSelection = false
    }
  },
  mounted: function() {
    let ts = {task: 'PlainSql',
               sql: 'select id, subjectname,teacher,examdate,venue,grade,totalstudents from dkhs_subjectgroup order by grade, subjectname, teacher'
             }
    zmlFetch(ts, this.loadData)
  }

}
</script>
