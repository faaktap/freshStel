<template>
<v-container>
homestart
<v-card>
    <v-card-text class="ma-2 pa-2">

<svg viewBox="0 0 32 32" width="32" height="32" xmlns="http://www.w3.org/2000/svg">
<!-- microphone off-->
    <path fill="red"
      d="m23 17a7 7 0 0 1 -11.73 5.14l1.42-1.41a5 5 0 0 0 8.31-3.73v-4.58l9-9-1.41-1.42-26.59 26.59 1.41 1.41 6.44-6.44a8.91 8.91 0 0 0 5.15 2.38v2.06h-4v2h10v-2h-4v-2.06a9 9 0 0 0 8-8.94v-3h-2z"
    />
    <path fill="blue"
      d="m9 17.32c0-.11 0-.21 0-.32v-3h-2v3a9 9 0 0 0 .25 2.09z"
    />
    <path fill="pink" d="m20.76 5.58a5 5 0 0 0 -9.76 1.42v8.34z" />
    <path d="m0 0h32v32h-32z" fill="none" />
</svg>
<!-- microphone on -->
            <svg viewBox="0 0 32 32"  width="32" height="32"  xmlns="http://www.w3.org/2000/svg">
              <path
                stroke="#FFF"
                fill="green"
                d="m23 14v3a7 7 0 0 1 -14 0v-3h-2v3a9 9 0 0 0 8 8.94v2.06h-4v2h10v-2h-4v-2.06a9 9 0 0 0 8-8.94v-3z"
              />
              <path
                stroke="silver"
                fill="#FFF"
                d="m16 22a5 5 0 0 0 5-5v-10a5 5 0 0 0 -10 0v10a5 5 0 0 0 5 5z"
              />
              <path d="m0 0h32v32h-32z" fill="none" />
            </svg>
    </v-card-text>
</v-card>

  <!-- Button size based on screen size -->
  <v-btn outlined :small="$vuetify.breakpoint.smAndDown">
    <v-icon :small="$vuetify.breakpoint.smAndDown">mdi-chevron-left</v-icon>
  </v-btn>

  <!-- Fontsize based on screen size -->
  <span :class="{'text-caption': $vuetify.breakpoint.smAndDown, 'text-md-body-1': $vuetify.breakpoint.mdAndUp}">
   PORTAL_SHOWING_PAGE
  </span>

  <!-- grid based on screen size -->
  <v-row justify-lg="center">
    <p class="mr-2">Cols based</p>
    <p class="mr-2">on screen</p>
    <p class="mr-2">size</p>
    <p class="mr-2">and 4</p>
    <p class="mr-2">and 5</p>
    <p class="mr-2">and 6</p>
    <p class="mr-2">and 7</p>
  </v-row>

  <!-- Margin based on screen size -->
  <v-flex :class="{'ma-0': $vuetify.breakpoint.smAndDown, 'ma-5': $vuetify.breakpoint.mdAndUp}" >
    <v-card class="ma-0 ma-md-5">
      <v-card-title>card.title</v-card-title>
     <!-- visibility based on screen size -->
     <v-row class="hidden-xs-only hidden-sm-and-down">
        hidden-xs-only hidden-sm-and-down
    </v-row>
    <v-row class="hidden-mobile">
        soe stfff hiideen mobile
    </v-row>
    </v-card>
  </v-flex>



<v-toolbar color="primary">
    <v-card color="primary" width="100%" class="pa-3" transition="scale-transition">
        <div class="d-flex flex-no-wrap justify-space-between">
    <div class="float-left ma-2">
         AVAILABLE OPTIONS FOR
    </div>
    <div class="float-center ma-1">
       <v-fade-transition leave-absolute v-if="showAvaTest">
        <avatar :username="getZml.login.fullname"
               @clickAvatar="showPhoto"
               :src="photo" />
         </v-fade-transition>
    </div>
    <div class="float-right ma-2">
         {{ getZml.login.fullname}} / {{ getZml.login.grade }} - {{ getZml.login.gclass }}
    </div>
        </div>
    </v-card>
</v-toolbar>

<!-- <iframe src="https://en.wikipedia.org/wiki/HTML_element#Frames"
            frameborder="0"
            marginheight="0"
            marginwidth="0"
            width="100%"
            height="100%"
            scrolling="auto" /> -->
            <!--(homestudent){{ studentid }} -->
<v-row>
 <v-col cols="12">
  <v-expansion-panels v-if="getZml.login.isAuthenticated">
   <v-expansion-panel>
       <v-expansion-panel-header
         title="A list of all the places you can go to on this webpage.">
         Functions (Click here to see available functions)
       </v-expansion-panel-header>
       <v-expansion-panel-content>
          <list-test functiongroup="student" />
          <list-test functiongroup="other" />
       </v-expansion-panel-content>
   </v-expansion-panel>

   <v-expansion-panel>
       <v-expansion-panel-header title="Show Email Bulletins">
          Email Bulletins</v-expansion-panel-header>

       <v-expansion-panel-content>
        <email-bulletins emailSearch="ebull" /></v-expansion-panel-content>
   </v-expansion-panel>
  </v-expansion-panels>



 </v-col>
</v-row>

 <!--student-name-card :studentList="studentList"  maybe add the current student namecard here.. -->

    <div v-if="getZml.login.isAuthenticated && getZml.login.username=='WER'">
        <v-btn to="/viewfunctions"> functions </v-btn>
        <v-btn to="/dkhsawards"> awards </v-btn>
    </div>
</v-container>
</template>

<script>
import { zmlConfig } from '@/api/constants';
import { zmlFetch } from '@/api/zmlFetch.js';
import { doStuff } from '@/api/buttons'
import { util } from '@/api/util'
import { infoSnackbar } from '@/api/GlobalActions';
import { getters } from "@/api/store";
import ListTest from '@/components/ListTest.vue';
import EmailBulletins from '@/components/email/EmailBulletins'
import Avatar from '@/components/base/Avatar'
export default {
    name:"HomeStart",
    components:{
          ListTest
        , Avatar
        , EmailBulletins
     },
    data: () => ({
        getZml: getters.getState({ object: "gZml" }),
         showCal:true,
         cards: ['Today', 'Yesterday'],
         gradeToShow:{g:'', c:''},
         weekOrDay:"day",
         photo:'',
         studentid:'',
         showPhotos:false,
         showAvaTest: false
    }),
    computed:{
       menuFilterList() {
            if (!this.getZml) return 0;
            return this.getZml.functions.filter(a => function()
            {
                if (a.accesstype == this.getZml.login.type)
                    return 1
                else
                    return 0
                }
            )
        }
    },
    methods:{
        showWiFiUsername() {
            this.$router.push({ name: 'wifi', params: {studentid: this.studentid, editmode: false} })
        },
        showAttendanceBadge(){
             window.open(`https://kuiliesonline.co.za/att/badge/${this.studentid}`)
        },
        showPhoto(ev) {
            //We only load the photo if he clicks on the avatar icon.
            //Then we replace the "initialicon" with a actual photo - if we have one.
            this.$cs.l('He clicked the icon - display photos if there are some', ev)
            this.showPhotos = true
        },
        weHaveIt(ev) {
            this.$cs.l('arrived!!', ev)
            this.photo=ev
        },
       weekOrDayChange() {
           if (this.weekOrDay == 'day') {
               this.weekOrDay = 'week'
           } else {
               this.weekOrDay = 'day'
           }
       },
       cardColor(type) {
           switch (type) {
               case 'teacher' : return "light-green lighten-3"
               case 'student' : return "green lighten-2"
               case 'admin' : return "green accent-3"
               default : return "orange lighten-4"
           }
       },
        click(what) {
            if (doStuff(this.$router,what.payload) == 0) {
                if (what.payload.substr(0,4).toLowerCase() == 'http') {
                    window.open(what.payload,'_' + 'ko_external')
                } else {
                    infoSnackbar('Sorry, we do not handle ' + what.payload + ' yet!' )
                }
            }

        },
        loadFunctions() {
           let ts = {};
           ts.task = 'PlainSql';
           ts.sql = 'select * from dkhs_lfunction where functionaccess = "student" order by sortorder'
           ts.api = zmlConfig.apiDKHS
           zmlFetch(ts, this.showData, this.loadError)
        },
        loadError(response) {
            //this.$cs.l(response)
            alert(response)
        },
        showData(response) {
           this.getZml.functions = response
           this.showAvaTest = true
        }
    },
    mounted: function() {
        this.$cs.l('home:', this.getZml.login.grade, this.getZml.login, this.getZml.login.grade.length)
        this.studentid = this.getZml.login.schoolno
        if (this.getZml.login.grade.length == 2 ) {
           this.gradeToShow.g = 'G'.concat(this.getZml.login.grade)
        } else {
           this.gradeToShow.g = 'G0'.concat(this.getZml.login.grade)
        }
        this.$cs.l(util.getNum('009'), this.getZml.login.schoolno, this.getZml.login.username )
        this.gradeToShow.c = this.getZml.login.gclass
        this.$cs.l('home2:', this.gradeToShow.g + this.gradeToShow.c)
        this.showCal = true;
        this.loadFunctions()


    }
}
</script>

