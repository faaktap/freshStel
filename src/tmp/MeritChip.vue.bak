<template>
<v-container fluid>
    <small><i>{{ treeString }}</i></small>
    {{ selArr }}
  <v-chip-group mandatory column>
    <v-chip v-for="tag in meritFilter(idx0)"
            :key="tag.id"
            @click="chgSubMenu(0,tag)"
            outlined
            :title="tag.info"

    >
     <template v-if="tag.title"> {{ tag.title }} </template>
    </v-chip>
  </v-chip-group>
  <v-divider color="grey darken-4" inset />
  <v-chip-group mandatory column>
    <v-chip v-for="tag in meritFilter(idx1)"
            :key="tag.id"
            @click="chgSubMenu(1,tag)"
            outlined
            :title="tag.info"
            color="grey darken-1"
    >
     <template v-if="tag.title"> {{ tag.title }} </template>
    </v-chip>
  </v-chip-group>
  <v-divider inset color="green" />
  <v-chip-group mandatory column color="grey darken-2">
    <v-chip v-for="tag in meritFilter(idx2)"
            :key="tag.id"
            @click="chgSubMenu(2,tag)"
            outlined
            :title="tag.points"


    >
     <template v-if="tag.title"> {{ tag.title }} </template>
    </v-chip>
  </v-chip-group>
  <v-divider inset color="green" />
  <v-chip-group mandatory column color="grey darken-3">
    <v-chip v-for="tag in meritFilter(idx3)"
            :key="tag.id"
            @click="chgSubMenu(3,tag)"
            outlined
            :title="tag.points"
            color="grey darken-1"
    >
     <template v-if="tag.title"> {{ tag.title }} </template>
    </v-chip>
  </v-chip-group>
  <v-divider class="mb-2" inset width="40%" />
  <v-btn small v-if="meritAlloc.meritid" @click="allocate"> Allocate {{ treeString }} </v-btn>

  <!-- <merit-stepper v-if="meritInfo" :meritInfo="meritInfo" /> -->
</v-container>
</template>

<script>
import { getters } from "@/api/store"
import { zData } from "@/api/zGetBackgroundData.js"
import { infoSnackbar } from "@/api/GlobalActions"
import { mer } from "@/components/merit/merit.js"
//import MeritStepper from "@/components/merit/MeritStepper"
  export default {
    name: 'MeritMenu',
    components:{
      // MeritStepper
    },
    data () {
      return {
        getZml: getters.getState({ object: "gZml" }),
        idx0: 0, //start with first menu on v-chips
        idx1: -1,
        idx2: -1,
        idx3: -1,
        idx4: -1,
        aTable: getters.getState({ object: "gZml" }).meritLevel , // we keep all data from sql here
        treeString: '', //display our selection
        selArr: [],
        curTag:'',
        meritInfo:'',
        meritAlloc:''
    }},
    computed: {
       meritFilter() {
         return id => this.aTable.filter(e => {
            if (e.back == id) {
              // console.log('Tr id,back.forward',id,e.back,e.forward)
              return true
            } else {
              // console.log('Fa-',id, e.back,e.forward)
              return false
            }
            })
       }
    },
    methods: {
      okWereGood(pData, description) {
        console.log('we do not need description here ', description)
        this.$router.push({name: 'MeritStepper' , meta: {layout: "AppLayoutDefault" }
                          ,params: {meritid: pData.meritid} })
      },
      allocate() {
        if (!this.meritAlloc.meritid) {
          infoSnackbar('Cannot do an assignment yet - select options below')
          return
        }
        let id = this.selArr[this.selArr.length-1]
        let r = this.aTable.find(f => f.id == id )
        //alert('MeritID = we need to add it to meritlink if not exist' + r.meritid + this.treeString)
        this.meritAlloc = {meritid: r.meritid, desc: this.treeString, continue:this.okWereGood}
        mer.check(this.meritAlloc)
        // now we need to wait before we call meritstepper. - continue will do that..
        return
/*

        // Now we need to check if this merit is in dkhs_meritlink,
        // if not there, we need to add record meritid, defaultpersmenemonic, defaultdescription
        //
        // then we need to add dkhs_meritstudent
        // meritstudentid, studentid, meritid, meritdte, persmenemonic, confirmdte, description
        this.meritInfo = "sdfsdfsdf"
*/
      },
      chgSubMenu(i,tag) {
        this.addLevel(i,tag)
        if (tag.forward == 0) {
          //we reach a workable tag
          //infoSnackbar('we reached the end - ask for student, and do assignment here - can enter many students at a time, or import?')
          let id = this.selArr[this.selArr.length-1]
          let r = this.aTable.find(f => f.id == id )
          this.meritAlloc = {meritid: r.meritid, desc: this.treeString}
          return
        }
        this.meritAlloc = {}
        //Get the record, where our id is in back list
        let id = this.aTable [this.aTable.findIndex(e => e.id == tag.forward)]
        if (i == 0) {
            this.idx1 = id.back
            this.idx2 = -1
            this.idx3 = -1
            this.selArr = []
            this.addLevel(i,tag)
        }
        if (i == 1) { this.idx2 = id.back }
        if (i == 2) { this.idx3 = id.back }
        if (i == 3) { this.idx4 = id.back }

        console.log('tag = ',i, tag.id, this.idx0,this.idx1,this.idx2,this.idx3, this.idx4)

        this.curTag = tag

        //recalc treeString
        this.treeString = ''
        this.selArr.forEach(s => {
          let f = this.aTable.find(f => f.id == s )
          this.treeString += f.title + (f.forward == 0 ? '.' : ', ')
        })


       },
       addLevel(i,tag) {
        console.log('array length and i ', i, this.selArr.length)
        if (this.selArr.length > i-1) this.selArr.pop()
        this.selArr.push(tag.id)
        this.treeString = ''
        let lastOne
        this.selArr.forEach(e => {
            const f = this.aTable.find(f => f.id == e )
            lastOne = f.meritid
            this.treeString += f.title + (f.forward == 0 ? '.' : ', ')
        })
        console.log('pushed - treeString = ', this.treeString, 'meritid=',lastOne)

       },
       initialize(data) {
        if (this.getZml.meritLevel.length < 10) {
           this.getZml.meritLevel = data
        }
        this.aTable = data
       },
    },
    mounted() {
        let sqlStatement = `SELECT * from dkhs_meritlevel`
        zData.loadSql(this.loading, sqlStatement, this.initialize)
    },

  }
</script>