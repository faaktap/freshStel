<template>
<div>
<v-container fluid v-if="['admin','teacher'].includes(getZml.login.type) == false">
    You are not logged in, or you are not a teacher!
</v-container>


<v-container fluid>

<v-toolbar  dense  row  wrap :xxcollapse="$vuetify.breakpoint.smAndDown">
    <v-app-bar-nav-icon  v-if="$vuetify.breakpoint.smAndDown" @click.stop="drawer = !drawer">
    </v-app-bar-nav-icon>
    <v-navigation-drawer v-model="drawer" absolute temporary >

      <v-switch v-model="showMeritPoint" hide-details
               class="mt-1 mr-2 mb-2 ml-2"
               label="Merit Point Allocation"
      />

      <base-tool-button class="mr-2" icon="mdi-cupcake">
        List 2
      </base-tool-button>
      <base-tool-button class="mr-2" icon="mdi-format-list-checkbox">
        List 3
      </base-tool-button>
      </v-navigation-drawer>
      <v-spacer />
      <v-switch v-model="showMeritPoint" hide-details
               class="mt-1 mr-2 mb-2 ml-2"
               label="Merit Point Allocation"
      />

      <base-tool-button class="mr-2" icon="mdi-cupcake">
        List 2
      </base-tool-button>
      <base-tool-button class="mr-2" icon="mdi-format-list-checkbox">
        List 3
      </base-tool-button>

  </v-toolbar>



<merit-link v-if="showMeritPoint" />



  <base-title-expand color="purple" heading="Merit Musings">
  <p>
    Once a merit is selected, we need to define a way that it can be added.. Easily, Quickly
    If a teacher is adding merits, he would most likely select on emerit and load a lot of students
    for it, so we could allow him to select a file, or paste a lot of schoolnumber in, maybe
    divided by commas.<br>
    If a student select a merit, we can autoadd him, with a ref that a teach must approve.

  </p>
  </base-title-expand>
  <base-title-expand color="purple" heading="Merit Select System 1"><p>
    One way of displaying the merit system, it's a bit tricky to go back only one. So the back button start over.
    Do we want to show the learners what the points for each entry is?</p>


<router-link to="/merit"> <v-btn> test1 </v-btn> </router-link>
<v-btn to="/merit">  test2  </v-btn>
<router-link :to="{ path: '/merit' }">test 3</router-link>
  </base-title-expand>

<p> Double click to go deeper, or press Edit button to change title, info or points.  </p>
  <merit-form  v-if="id && id > 0"
              :id="id"
              @done="doneEditing" />
  <v-divider />

  <h2>{{ treeString }}</h2>
   <v-data-table  v-if="aTable.length"
     :headers="headers"
     :items="tableItemFilter"
     @click="meritClick"
     @dblclick:row.prevent="meritDblClick"
     mobile-breakpoint="0"
   >
      <template v-slot:[`footer.page-text`]>
       <v-btn v-if="index != 0"
             @click="backClick()"
             align="center" class="ma-2 pa-2" >
          back
      </v-btn>
      </template>
      <template v-slot:[`item.points`]="{ item }">
        <div v-if="item.forward == 0"> {{ item.points}} </div>
      </template>
      <template v-slot:[`item.description`]="{ item }"  >
       <template v-if="!$vuetify.breakpoint.mobile">
         {{ item.description }}
        </template>
      </template>
      <template v-slot:[`item.action`]="{ item }">
        <v-btn-toggle v-model="toggle">
         <v-btn icon x-small
                @click="meritDblClick($event,item)"
                title="Delve">
             <v-icon small color="red" class="my-1">mdi-arrow-right-circle-outline</v-icon>
         </v-btn>
         <v-btn  icon x-small
                @click="retrieveForDelete(item)"
                title="Delete">
             <v-icon small color="red" class="my-1">mdi-delete</v-icon>
         </v-btn>
         <v-btn  x-small icon
                @click="retrieveForEdit(item)"
                title="Edit">
             <v-icon small color="green" class="my-1">mdi-circle-edit-outline</v-icon>
         </v-btn>

        </v-btn-toggle>
      </template>
   </v-data-table>

   <v-card color="primary">
    <merit-chip />
   </v-card>
</v-container>
</div>
</template>

<docs>
Here is some documentation
</docs>
<script>
import { getters } from "@/api/store"
import { zData } from "@/api/zGetBackgroundData.js"
import { infoSnackbar } from "@/api/GlobalActions"
import BaseTitleExpand from '@/components/base/BaseTitleExpand.vue'
import BaseToolButton from '@/views/new/base/BaseToolButton.vue'

import MeritForm from "@/components/merit/MeritForm"
import MeritChip from "@/components/merit/MeritChip"

import MeritLink from "@/components/merit/MeritLink"

export default {
    name: 'MeritTable',
    components:{
        BaseTitleExpand
      , BaseToolButton
      , MeritForm
      , MeritChip
      , MeritLink
    },
    data () {
      return {
        drawer: false,
        showMeritPoint: false,
        docs:  this.__docs,
        getZml: getters.getState({ object: "gZml" }),
        id:0,
        action:'',
        toggle:'',
        index: 0,  //start with first menu, on v-datatable
        aTable: [], // we keep all data from sql here
        treeString: '', //display our selection
        headers: [{ text:"the name", value: "title", align: "left"},
                 //{ text:"back", value: "back", align: "left"},
                 //{ text:"forward", value: "forward", align: "left"},
                 { text:"", value: "points", align: "center"},
                 { text:"", value: "description", align: "left"},
                 { text:"", value: "action", align: "right"}],
    }},
    methods: {
      clickOnRow(e1,e2) {
        console.log('clicked on row inside row', e1,e2)
      },
      doneEditing(e) {
        console.log('afterEdit:', e)
        this.id = 0
        this.initialize()
      },
      retrieveForDelete(i) {
        this.action = 'Delete'
        console.log('retrieveForDelete:',i)
        },
      retrieveForEdit(i) {
        this.action = 'Edit'
        console.log('retrieveForEdit',i)
        this.id = i.id
        console.log('CurrentRec was loaded',this.id)
        },
      chgSubMenu(i,tag) {
        if (tag.forward == 0) {
          //we reach a workable tag
          infoSnackbar('we reached the end - ask for student, and do assignment here - can enter many students at a time, or import?')
        }
        //Get the record, where our id is in back list
        let id = this.aTable [this.aTable.findIndex(e => e.id == tag.forward)]
        console.log(id)

      },
       backClick() {
         this.treeString = ''
         this.index = 0
      },
      meritDblClick(e,i) {
        //going forward
        // When we click on the icon, and not use dblclick, we need to define i.item as i
        // (Diffenent info is passed down)
        console.log(e,i)
        if (!i.item) i.item = i


        this.treeString += i.item.title + (i.item.forward == 0 ? '.' : ', ')
        if (i.item.forward == 0) {
          infoSnackbar('we reached the end - ask for student, and do assignment here - can enter many students at a time, or import?')
          return
        }
        let id = this.aTable [this.aTable.findIndex(e => e.id == i.item.forward)]
        if (id == -1) alert('we have a problem with out indexes')
        this.index = id.back
      },
      meritClick(e) {
        console.log(e)
      },
      initialize(data) {
        //Although we have the data, we rather read from store
        console.log('INITIALIZE START')
        console.timeLog('timer','-1')
        if (this.getZml.meritLevel.length < 10) {
           this.aTable = data
           console.log('still too small',this.getZml.meritLevel)
        } else {
           this.aTable = this.getZml.meritLevel
           console.log('BIG ENOUGH',this.getZml.meritLevel)
        }
        // do a test...
        console.timeLog('timer','0')
        //[{id:10, back:10, forward: 20, points:0, title:"hllo", description:"jsdfsdf"}],
        console.timeLog('timer','1')
        console.log('after setTimeout in Initsialize')

      },
      testStuff() {
        console.log('IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIin teststuff -- filter meritLevel')
        console.timeLog('timer','2')
        let bot = this.getZml.meritLevel.filter(e => e.forward == 0)
        console.log('endpoints = ', bot)
        console.timeEnd('timer')
      },
      callIt(p) {
        p()
      }
    },
    mounted() {
      console.log('MOUNTED START')
      console.time('timer')

         if (this.getZml.meritLevel.length < 10) {
            console.timeLog('we need to load it...')
            let sqlStatement = `SELECT * from d_meritlevel`
            zData.loadSql(this.loading, sqlStatement,this.initialize)
            console.timeLog('timer','mm')
         } else {
           console.timeLog('already there....')
           this.aTable = this.getZml.meritLevel
         }


      let timeout = setTimeout(
        function() {
          this.testStuff
      }, 4000)
      console.timeLog('aTIMEOIT VALUE', timeout)
    },
    computed: {
       tableItemFilter() {
        // console.log('iFilt=', this.index)
        if (!this.aTable.length) return []
          return this.aTable.filter(e => {
                    if (e.back == this.index) { return true } else { return false }
                 })
       },
    },
  }
</script>
